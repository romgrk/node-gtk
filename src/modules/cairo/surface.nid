// vim: ft=c

/*
 * IMPORTANT:
 *   Don't forget to update cairo.cc's GetTemplate if a new type
 *   is added.
 */

// Surface:
namespace Surface {

[[static]] cairo_surface_t * cairo_surface_create_similar (cairo_surface_t *other, cairo_content_t content, int width, int height);
[[static]] cairo_surface_t * cairo_surface_create_similar_image (cairo_surface_t *other, cairo_format_t format, int width, int height);
[[static]] cairo_surface_t * cairo_surface_create_for_rectangle (cairo_surface_t *target, double x, double y, double width, double height);
cairo_status_t cairo_surface_write_to_png (cairo_surface_t *surface, const char *filename);
/* cairo_surface_t * cairo_surface_reference (cairo_surface_t *surface); */
/* void cairo_surface_destroy (cairo_surface_t *surface); */
cairo_status_t cairo_surface_status (cairo_surface_t *surface);
void cairo_surface_finish (cairo_surface_t *surface);
void cairo_surface_flush (cairo_surface_t *surface);
cairo_device_t * cairo_surface_get_device (cairo_surface_t *surface);
void cairo_surface_get_font_options (cairo_surface_t *surface, [[out]] cairo_font_options_t *options);
cairo_content_t cairo_surface_get_content (cairo_surface_t *surface);
void cairo_surface_mark_dirty (cairo_surface_t *surface);
void cairo_surface_mark_dirty_rectangle (cairo_surface_t *surface, int x, int y, int width, int height);
void cairo_surface_set_device_offset (cairo_surface_t *surface, double x_offset, double y_offset);
void cairo_surface_get_device_offset (cairo_surface_t *surface, [[out]] double *x_offset, [[out]] double *y_offset);
void cairo_surface_get_device_scale (cairo_surface_t *surface, [[out]] double *x_scale, [[out]] double *y_scale);
void cairo_surface_set_device_scale (cairo_surface_t *surface, double x_scale, double y_scale);
void cairo_surface_set_fallback_resolution (cairo_surface_t *surface, double x_pixels_per_inch, double y_pixels_per_inch);
void cairo_surface_get_fallback_resolution (cairo_surface_t *surface, [[out]] double *x_pixels_per_inch, [[out]] double *y_pixels_per_inch);
cairo_surface_type_t cairo_surface_get_type (cairo_surface_t *surface);
unsigned int cairo_surface_get_reference_count (cairo_surface_t *surface);
/* cairo_status_t cairo_surface_set_user_data (cairo_surface_t *surface, const cairo_user_data_key_t *key, void *user_data, cairo_destroy_func_t destroy); */
/* void * cairo_surface_get_user_data (cairo_surface_t *surface, const cairo_user_data_key_t *key); */
void cairo_surface_copy_page (cairo_surface_t *surface);
void cairo_surface_show_page (cairo_surface_t *surface);
cairo_bool_t cairo_surface_has_show_text_glyphs (cairo_surface_t *surface);
/* cairo_status_t cairo_surface_set_mime_data (cairo_surface_t *surface, const char *mime_type, const unsigned char *data, unsigned long length, cairo_destroy_func_t destroy, void *closure); */
/* void cairo_surface_get_mime_data (cairo_surface_t *surface, const char *mime_type, const unsigned char **data, unsigned long *length); */
cairo_bool_t cairo_surface_supports_mime_type (cairo_surface_t *surface, const char *mime_type);
cairo_surface_t * cairo_surface_map_to_image (cairo_surface_t *surface, const cairo_rectangle_int_t *extents);
void cairo_surface_unmap_image (cairo_surface_t *surface, cairo_surface_t *image);
/* #define CAIRO_MIME_TYPE_CCITT_FAX "image/g3fax"
 * #define CAIRO_MIME_TYPE_CCITT_FAX_PARAMS "application/x-cairo.ccitt.params"
 * #define CAIRO_MIME_TYPE_EPS "application/postscript"
 * #define CAIRO_MIME_TYPE_EPS_PARAMS "application/x-cairo.eps.params"
 * #define CAIRO_MIME_TYPE_JBIG2 "application/x-cairo.jbig2"
 * #define CAIRO_MIME_TYPE_JBIG2_GLOBAL "application/x-cairo.jbig2-global"
 * #define CAIRO_MIME_TYPE_JBIG2_GLOBAL_ID "application/x-cairo.jbig2-global-id"
 * #define CAIRO_MIME_TYPE_JP2 "image/jp2"
 * #define CAIRO_MIME_TYPE_JPEG "image/jpeg"
 * #define CAIRO_MIME_TYPE_PNG "image/png"
 * #define CAIRO_MIME_TYPE_URI "text/x-uri"
 * #define CAIRO_MIME_TYPE_UNIQUE_ID "application/x-cairo.uuid" */
}

// Surface > ImageSurface:
namespace ImageSurface {

[[constructor]] cairo_surface_t * cairo_image_surface_create (cairo_format_t format, int width, int height);
[[static]] cairo_surface_t * cairo_image_surface_create_from_png (const char *filename);
[[static]] cairo_surface_t * cairo_image_surface_create_for_data (unsigned char *data, cairo_format_t format, int width, int height, int stride);
[[returns(uint8_t *)]] unsigned char * cairo_image_surface_get_data (cairo_surface_t *surface);
cairo_format_t cairo_image_surface_get_format (cairo_surface_t *surface);
int cairo_image_surface_get_width (cairo_surface_t *surface);
int cairo_image_surface_get_height (cairo_surface_t *surface);
int cairo_image_surface_get_stride (cairo_surface_t *surface);
}

// png support:

/* cairo_status_t (*cairo_read_func_t) (void *closure, unsigned char *data, unsigned int length); */
/* cairo_surface_t * cairo_image_surface_create_from_png_stream (cairo_read_func_t read_func, void *closure); */
/* cairo_status_t (*cairo_write_func_t) (void *closure, const unsigned char *data, unsigned int length); */
/* cairo_status_t cairo_surface_write_to_png_stream (cairo_surface_t *surface, cairo_write_func_t write_func, void *closure); */

// Surface > PDFSurface:
/* namespace PDFSurface {
 * 
 * [[constructor]] cairo_surface_t * cairo_pdf_surface_create (const char *filename, double width_in_points, double height_in_points);
 * [> cairo_surface_t * cairo_pdf_surface_create_for_stream (cairo_write_func_t write_func, void *closure, double width_in_points, double height_in_points); <]
 * [> [[static]] void cairo_pdf_get_versions ([[out]] cairo_pdf_version_t const **versions, [[out]] int *num_versions); <]
 * [[static]] const char * cairo_pdf_version_to_string (cairo_pdf_version_t version);
 * void cairo_pdf_surface_restrict_to_version (cairo_surface_t *surface, cairo_pdf_version_t version);
 * void cairo_pdf_surface_set_size (cairo_surface_t *surface, double width_in_points, double height_in_points);
 * int cairo_pdf_surface_add_outline (cairo_surface_t *surface, int parent_id, const char *utf8, const char *link_attribs, cairo_pdf_outline_flags_t flags);
 * void cairo_pdf_surface_set_metadata (cairo_surface_t *surface, cairo_pdf_metadata_t metadata, const char *utf8);
 * void cairo_pdf_surface_set_page_label (cairo_surface_t *surface, const char *utf8);
 * void cairo_pdf_surface_set_thumbnail_size (cairo_surface_t *surface, int width, int height);
 * } */

// Surface > PostScriptSurface:
/* namespace PostScriptSurface {
 * 
 * [[constructor]] cairo_surface_t * cairo_ps_surface_create (const char *filename, double width_in_points, double height_in_points);
 * [> cairo_surface_t * cairo_ps_surface_create_for_stream (cairo_write_func_t write_func, void *closure, double width_in_points, double height_in_points); <]
 * [[static]] const char * cairo_ps_level_to_string (cairo_ps_level_t level);
 * void cairo_ps_surface_restrict_to_level (cairo_surface_t *surface, cairo_ps_level_t level);
 * void cairo_ps_get_levels ([[out]] cairo_ps_level_t const **levels, [[out]] int *num_levels);
 * void cairo_ps_surface_set_eps (cairo_surface_t *surface, cairo_bool_t eps);
 * cairo_bool_t cairo_ps_surface_get_eps (cairo_surface_t *surface);
 * void cairo_ps_surface_set_size (cairo_surface_t *surface, double width_in_points, double height_in_points);
 * void cairo_ps_surface_dsc_begin_setup (cairo_surface_t *surface);
 * void cairo_ps_surface_dsc_begin_page_setup (cairo_surface_t *surface);
 * void cairo_ps_surface_dsc_comment (cairo_surface_t *surface, const char *comment);
 * } */

// Surface > RecordingSurface:
namespace RecordingSurface {

[[constructor]] cairo_surface_t * cairo_recording_surface_create (cairo_content_t content, const cairo_rectangle_t *extents);
void cairo_recording_surface_ink_extents (cairo_surface_t *surface, [[out]] double *x0, [[out]] double *y0, [[out]] double *width, [[out]] double *height);
cairo_bool_t cairo_recording_surface_get_extents (cairo_surface_t *surface, [[out]] cairo_rectangle_t *extents);
}

// Surface > Win32Surface:
/* namespace Win32Surface {
 * 
 * [> cairo_surface_t * cairo_win32_surface_create (HDC hdc); <]
 * [[constructor]] cairo_surface_t * cairo_win32_surface_create_with_dib (cairo_format_t format, int width, int height);
 * [> [[static]] cairo_surface_t * cairo_win32_surface_create_with_ddb (HDC hdc, cairo_format_t format, int width, int height); <]
 * [> [[static]] cairo_surface_t * cairo_win32_surface_create_with_format (HDC hdc, cairo_format_t format); <]
 * [> [[static]] cairo_surface_t * cairo_win32_printing_surface_create (HDC hdc); <]
 * [> HDC cairo_win32_surface_get_dc (cairo_surface_t *surface); <]
 * cairo_surface_t * cairo_win32_surface_get_image (cairo_surface_t *surface);
 * } */

// Surface > SVGSurface:
/* namespace SVGSurface {
 * 
 * [[constructor]] cairo_surface_t * cairo_svg_surface_create (const char *filename, double width_in_points, double height_in_points);
 * [> cairo_surface_t * cairo_svg_surface_create_for_stream (cairo_write_func_t write_func, void *closure, double width_in_points, double height_in_points); <]
 * [> [[static]] void cairo_svg_get_versions ([[out]] cairo_svg_version_t const **versions, [[out]] int *num_versions); <]
 * [[static]] const char * cairo_svg_version_to_string (cairo_svg_version_t version);
 * cairo_svg_unit_t cairo_svg_surface_get_document_unit (cairo_surface_t *surface);
 * void cairo_svg_surface_set_document_unit (cairo_surface_t *surface, cairo_svg_unit_t unit);
 * void cairo_svg_surface_restrict_to_version (cairo_surface_t *surface, cairo_svg_version_t version);
 * } */

// Surface > QuartsSurface:
/* namespace QuartzSurface {
 * 
 * [[constructor]] cairo_surface_t * cairo_quartz_surface_create (cairo_format_t format, unsigned int width, unsigned int height);
 * [> cairo_surface_t * cairo_quartz_surface_create_for_cg_context (CGContextRef cgContext, unsigned int width, unsigned int height); <]
 * [> CGContextRef cairo_quartz_surface_get_cg_context (cairo_surface_t *surface); <]
 * } */

// Surface > XCBSurface:

/* cairo_surface_t * cairo_xcb_surface_create (xcb_connection_t *connection, xcb_drawable_t drawable, xcb_visualtype_t *visual, int width, int height);
 * cairo_surface_t * cairo_xcb_surface_create_for_bitmap (xcb_connection_t *connection, xcb_screen_t *screen, xcb_pixmap_t bitmap, int width, int height);
 * cairo_surface_t * cairo_xcb_surface_create_with_xrender_format (xcb_connection_t *connection, xcb_screen_t *screen, xcb_drawable_t drawable, xcb_render_pictforminfo_t *format, int width, int height);
 * void cairo_xcb_surface_set_size (cairo_surface_t *surface, int width, int height);
 * void cairo_xcb_surface_set_drawable (cairo_surface_t *surface, xcb_drawable_t drawable, int width, int height);
 * xcb_connection_t * cairo_xcb_device_get_connection (cairo_device_t *device);
 * void cairo_xcb_device_debug_cap_xrender_version (cairo_device_t *device, int major_version, int minor_version);
 * void cairo_xcb_device_debug_cap_xshm_version (cairo_device_t *device, int major_version, int minor_version);
 * int cairo_xcb_device_debug_get_precision (cairo_device_t *device);
 * void cairo_xcb_device_debug_set_precision (cairo_device_t *device, int precision); */

// Surface > XlibSurface:

/* cairo_surface_t * cairo_xlib_surface_create (Display *dpy, Drawable drawable, Visual *visual, int width, int height);
 * cairo_surface_t * cairo_xlib_surface_create_for_bitmap (Display *dpy, Pixmap bitmap, Screen *screen, int width, int height);
 * void cairo_xlib_surface_set_size (cairo_surface_t *surface, int width, int height);
 * Display * cairo_xlib_surface_get_display (cairo_surface_t *surface);
 * Screen * cairo_xlib_surface_get_screen (cairo_surface_t *surface);
 * void cairo_xlib_surface_set_drawable (cairo_surface_t *surface, Drawable drawable, int width, int height);
 * Drawable cairo_xlib_surface_get_drawable (cairo_surface_t *surface);
 * Visual * cairo_xlib_surface_get_visual (cairo_surface_t *surface);
 * int cairo_xlib_surface_get_width (cairo_surface_t *surface);
 * int cairo_xlib_surface_get_height (cairo_surface_t *surface);
 * int cairo_xlib_surface_get_depth (cairo_surface_t *surface);
 * void cairo_xlib_device_debug_cap_xrender_version (cairo_device_t *device, int major_version, int minor_version);
 * int cairo_xlib_device_debug_get_precision (cairo_device_t *device);
 * void cairo_xlib_device_debug_set_precision (cairo_device_t *device, int precision); */

/* cairo_surface_t * cairo_xlib_surface_create_with_xrender_format (Display *dpy, Drawable drawable, Screen *screen, XRenderPictFormat *format, int width, int height);
 * XRenderPictFormat * cairo_xlib_surface_get_xrender_format (cairo_surface_t *surface); */

// Surface > ScriptSurface:

/* cairo_surface_t * cairo_script_surface_create (cairo_device_t *script, cairo_content_t content, double width, double height);
 * cairo_surface_t * cairo_script_surface_create_for_target (cairo_device_t *script, cairo_surface_t *target); */

// Script

/* [[constructor]] cairo_device_t * cairo_script_create (const char *filename);
 * cairo_device_t * cairo_script_create_for_stream (cairo_write_func_t write_func, void *closure);
 * cairo_status_t cairo_script_from_recording_surface ([[out]] cairo_device_t *script, cairo_surface_t *recording_surface);
 * cairo_script_mode_t cairo_script_get_mode (cairo_device_t *script);
 * void cairo_script_set_mode (cairo_device_t *script, cairo_script_mode_t mode);
 * void cairo_script_write_comment (cairo_device_t *script, const char *comment, int len); */
